---
AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  CIDRRange:
    Type: String
    Default: 10.250.0.0
    Description: VPCCIDR Range (will be a /16 block)
    AllowedValues:
    - 10.250.0.0
  MyIP:
    Type: String
Mappings:
  VPCRanges:
    10.250.0.0:
      PublicSubnetAZ1: 10.250.0.0/24
      PublicSubnetAZ2: 10.250.1.0/24
      PrivateSubnetAZ1: 10.250.10.0/24
      PrivateSubnetAZ2: 10.250.11.0/24
Resources:
  VPCBase:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Join [ '', [ !Ref CIDRRange, '/16' ] ]
      EnableDnsSupport: 'True'
      EnableDnsHostnames: 'True'
      Tags:
      - Key: Name
        Value: !Join [ '', [ !Ref 'AWS::StackName', '-VPC' ] ]
  PublicNetAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '0'
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !FindInMap [ VPCRanges, !Ref CIDRRange, PublicSubnetAZ1 ]
      MapPublicIpOnLaunch: 'True'
      Tags:
      - Key: Name
        Value: !Join [ '', [ !Ref 'AWS::StackName', '-PublicAZ1' ] ]
      VpcId: !Ref VPCBase
  PublicNetAZ2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '1'
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !FindInMap [ VPCRanges, !Ref CIDRRange, PublicSubnetAZ2 ]
      MapPublicIpOnLaunch: 'True'
      Tags:
      - Key: Name
        Value: !Join [ '', [ !Ref 'AWS::StackName', '-PublicAZ2' ] ]
      VpcId: !Ref VPCBase
  PrivateNetAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '0'
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !FindInMap [ VPCRanges, !Ref CIDRRange, PrivateSubnetAZ1 ]
      MapPublicIpOnLaunch: 'False'
      Tags:
      - Key: Name
        Value: !Join [ '', [ !Ref 'AWS::StackName', '-PrivateAZ1' ] ]
      - Key: Network
        Value: private
      VpcId: !Ref VPCBase
  PrivateNetAZ2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '1'
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !FindInMap [ VPCRanges, !Ref CIDRRange, PrivateSubnetAZ2 ]
      MapPublicIpOnLaunch: 'False'
      Tags:
      - Key: Name
        Value: !Join [ '', [ !Ref 'AWS::StackName', '-PrivateAZ2' ] ]
      - Key: Network
        Value: private
      VpcId: !Ref VPCBase
  IGWBase:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Join [ '', [ !Ref 'AWS::StackName', '-IGW' ] ]
  VGAIGWBase:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGWBase
      VpcId: !Ref VPCBase
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCBase
      Tags:
      - Key: Name
        Value: !Join [ '', [ !Ref 'AWS::StackName', '-PublicRT' ] ]
  RouteTablePrivateAZ1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCBase
      Tags:
      - Key: Name
        Value: !Join [ '', [ !Ref 'AWS::StackName', '-PrivateAZ1RT' ] ]
  RouteTablePrivateAZ2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCBase
      Tags:
      - Key: Name
        Value: !Join [ '', [ !Ref 'AWS::StackName', '-PrivateAZ2RT' ] ]
  RoutePublicDefault:
    DependsOn:
    - VGAIGWBase
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGWBase
  RouteAssociationPublicAZ1Default:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicNetAZ1
      RouteTableId: !Ref RouteTablePublic
  RouteAssociationPublicAZ2Default:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicNetAZ2
      RouteTableId: !Ref RouteTablePublic
  RouteAssociationPrivateAZ1Default:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateNetAZ1
      RouteTableId: !Ref RouteTablePrivateAZ1
  RouteAssociationPrivateAZ2Default:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateNetAZ2
      RouteTableId: !Ref RouteTablePrivateAZ2
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPCBase
      Tags:
      - Key: Application
        Value: !Ref AWS::StackId
      - Key: Network
        Value: Public
  InboundHTTPPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  InboundHTTPSPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '200'
      Protocol: '27'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '3389'
        To: '3389'
  InboundDynamicPortsPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '300'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '32768'
        To: '65535'
  OutboundHTTPPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  OutboundHTTPSPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '200'
      Protocol: '27'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '3389'
        To: '3389'
  OutBoundDynamicPortPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '300'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '32768'
        To: '65535'
  PublicNetAZ1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicNetAZ1
      NetworkAclId: !Ref PublicNetworkAcl
  PublicNetAZ2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicNetAZ2
      NetworkAclId: !Ref PublicNetworkAcl
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPCBase
      GroupDescription: ECS cluster instance security group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3389'
        ToPort: '3389'
        CidrIp: !Join [ '', [ !Ref MyIP, '/32' ] ]
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: !Join [ '', [ !Ref MyIP, '/32' ] ]
      - IpProtocol: '-1'
        CidrIp: !Join [ '', [ !Ref CIDRRange, '/16' ] ]
  CodeDeployServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ${AWS::StackName}-CodeDeployServiceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
  EC2InstanceProfile:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ${AWS::StackName}-EC2-Instance-Profile
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
  EC2Policy:
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: !Sub ${AWS::StackName}-EC2Policy
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Action:
          - s3:Get*
          - s3:List*
          Effect: Allow
          Resource: "*"
      Roles: 
        - !Ref EC2InstanceProfile
Outputs:
  VPC:
    Value: !Ref VPCBase
